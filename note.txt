// for educational
// Google Maps Platform Terms of Service 3.2.3a no scraping


// to begin this project
mkdir gmap_places
cd gmap_places
code .
npm init -y
npm install express puppeteer body-parser node-fetch cors --save
npm install nodemon --save-dev

// in package.json
    "start-dev": "nodemon server"


// create basic back end and front end directories and files
mkdir server
touch server/index.js
mkdir public
touch public/app.js public/index.html

// server/index.js
// After installed all packages, create ROOT and POST routes,
// ROOT route just be there, 
// POST route takes form input request and response back its input for now,
// should be able to test with Postman.

// public/app.js
// Access index.html form, on form submit, fetch a post request to backend index.js,
// get JSON object response back as array of form input for now,
// append response as HTML list below.

// public/index.html
// Access app.js, build a form with input fields, a button, and a empty div,
// result will later append to empty div.

// run the server
npm run start-dev

// Without front end is ok, this is a back end only project that produce JSON result,
// This front end got redirected the path is for testing, everything can be test with Postman.

// upload to github as first milestone
echo "# gmap_places" >> README.md
touch .gitignore
    // add 2 lines
    # dependencies
    /node_modules
    node_modules/
git init
git add .
git commit -m "first commit, basic server with form POST"
git branch -M main
git remote add origin https://github.com/fruit13ok/gmap_places.git
git push -u origin main
    // GitHub is working on replacing the term "master" on its service with a neutral term like "main" to avoid any unnecessary references to slavery

// if .gitignore not working, having upload project too large error,
// delete node_modules folder, push again,
// if still not work, delete .git folder too, try again.
// Remember to npm i before next run, might need to click refresh in folder explorer.


//////////////////////////////////// trying selecting from DOM ////////////////////////////////
// this can select current page result (20, may include extra ad results)
document.querySelectorAll('div.section-result-content')
// or
document.querySelectorAll('a[jstcache="856"]:not([class]');
// click on the second result, go to detail page
document.querySelectorAll('a[jstcache="856"]:not([class]')[1].click();

// code that can automate click the first result
const forLoop = async (resultElements) => {
    return resultElements[0];
}
async function scrape (searchKey) {
    const browser = await puppeteer.launch({headless: false, slowMo: 100});
    const page = await browser.newPage();
    const navigationPromise =  page.waitForNavigation();
    await page.goto('https://www.google.com/maps/');
    await navigationPromise;
    await page.type('input#searchboxinput', searchKey, { delay: 50 });
    await page.keyboard.press('Enter');
    let urls = [];
    await page.waitForSelector('div.section-result-content');
    const arrOfElements = await page.$$('div.section-result-content');
    const arrObj = await forLoop(arrOfElements);
    await arrObj.click();
    await navigationPromise;
    // await browser.close();   // comment out let browser stay open after done the task
    return urls;
}

////////////////////////////// first version done ///////////////////////////

////////////////////////// this article help to use less request /////////////////////////
https://stackoverflow.com/questions/55664420/page-evaluate-vs-puppeteer-methods/55665084

//////////////////////////////// the thing need to scrape and naming //////////////////////////////////
name
    Seattle Ninja
category
    Business & Professional Services
address
    1631 Belmont Ave, Seattle, WA 98122, USA
phonenumber
    2064975700
website
    http://www.ninjaseattle.com/
longdescription
    <ask about this>
businesshours
    [
        {day: "MONDAY", endTime: "17:00", startTime: "16:00"},
        {day: "TUESDAY", endTime: "", startTime: ""},
        {day: "WEDNESDAY", endTime: "", startTime: ""},
        {day: "THURSDAY", endTime: "", startTime: ""},
        {day: "FRIDAY", endTime: "", startTime: ""},
        {day: "SATURDAY", endTime: "", startTime: ""},
        {day: "SUNDAY", endTime: "", startTime: ""}
    ]
logo
    NULL
    <or image url>
latitude
    47.6161712
longitude
    -122.3246548
bbbAccredited
    0
    <ask about this>


document.querySelector('button[aria-label="Share"]').click()
document.querySelector('input.section-copy-link-input').value
document.querySelector('button[aria-label="Close"]').click()

document.querySelector('.section-open-hours-button').click();
document.querySelector('.section-open-hours-container').innerText;


var hoursStr = document.querySelector('.section-open-hours-container').innerText;
var hoursArr = hoursStr.replace(/\s/g, ' ').split(' ').filter(e=>e!="");

["Tuesday", "9AM–5:30PM", "Wednesday", "8AM–1PM", "Thursday", "(Thanksgiving)", "Closed", "Holiday", "hours", "Friday", "(Black", "Friday)", "Closed", "Holiday", "hours", "Saturday", "Closed", "Sunday", "Closed", "Monday", "9AM–5:30PM"]

EX:
[
    {day: "Monday", hours: "9AM–5:30PM"},
    {day: "Tuesday", hours: "9AM–5:30PM"},
    {day: "Wednesday", hours: "8AM–1PM"},
    {day: "Thursday", hours: "Thanksgiving Closed Holiday hours"},
    {day: "Friday", hours: "Black Friday Closed Holiday hours"},
    {day: "Saturday", hours: "Closed"},
    {day: "Sunday", hours: "Closed"}
]

var curDay = {};
var businesshours = [];
var days = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"];
for (let i=0; i<hoursArr.length; i++){
    if(days.includes(hoursArr[i])){
        if(i!=0){
            businesshours.push(curDay);
            curDay = {};
        }
        curDay.day = hoursArr[i];
        curDay.hours = "";
    }else{
        curDay.hours += hoursArr[i]+" ";
    }
    if(i==hoursArr.length-1){
        businesshours.push(curDay);
    }
}
const sorter = {"Monday": 1,"Tuesday": 2,"Wednesday": 3,"Thursday": 4,"Friday": 5,"Saturday": 6,"Sunday": 0};
businesshours.sort((a, b)=> sorter[a.day]-sorter[b.day]);

console.log(businesshours);